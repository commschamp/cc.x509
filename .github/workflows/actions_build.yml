name: Github Actions Build

on: [push]

env:
  COMMS_BRANCH: develop
  COMMSDSL_BRANCH: develop
  CC_ASN1_BRANCH: master

jobs:
  build_gcc_ubuntu_18_04:
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        type: [Debug, Release, MinSizeRel]
        cc_ver: [4.8, 5, 6, 7]
        cpp: [11, 14]

    steps:
    - uses: actions/checkout@v2

    - name: Prepare Install
      run: sudo apt-get update --fix-missing    
      
    - name: Install Packages
      run: sudo apt install libxml2-dev gcc-${{matrix.cc_ver}} g++-${{matrix.cc_ver}} gcc-8 g++-8

    - name: Create Externals directory
      run: cmake -E make_directory ${{runner.workspace}}/externals        

    - name: Clone COMMS library
      working-directory: ${{runner.workspace}}/externals 
      run: git clone -b $COMMS_BRANCH https://github.com/commschamp/comms

    - name: Create COMMS build directory
      run: cmake -E make_directory ${{runner.workspace}}/externals/comms/build  

    - name: Configure COMMS library
      shell: bash
      working-directory: ${{runner.workspace}}/externals/comms/build 
      run: cmake ${{runner.workspace}}/externals/comms -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_INSTALL_PREFIX=install
      env:
        CC: gcc-${{matrix.cc_ver}}
        CXX: g++-${{matrix.cc_ver}}

    - name: Build COMMS library
      working-directory: ${{runner.workspace}}/externals/comms/build
      shell: bash
      run: cmake --build . --target install
      env:
        VERBOSE: 1     

    - name: Clone commsdsl
      working-directory: ${{runner.workspace}}/externals 
      run: git clone -b $COMMSDSL_BRANCH https://github.com/commschamp/commsdsl

    - name: Create commsdsl build directory
      run: cmake -E make_directory ${{runner.workspace}}/externals/commsdsl/build  

    - name: Configure commsdsl
      shell: bash
      working-directory: ${{runner.workspace}}/externals/commsdsl/build 
      run: cmake ${{runner.workspace}}/externals/commsdsl -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_INSTALL_PREFIX=install -DCOMMSDSL_INSTALL_LIBRARY=OFF -DCMAKE_PREFIX_PATH="${{runner.workspace}}/externals/comms/build/install"
      env:
        CC: gcc-8
        CXX: g++-8

    - name: Build commsdsl
      working-directory: ${{runner.workspace}}/externals/commsdsl/build
      shell: bash
      run: cmake --build . --target install
      env:
        VERBOSE: 1               

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Clone cc.asn1
      working-directory: ${{runner.workspace}}/externals
      run: git clone -b $CC_ASN1_BRANCH https://github.com/commschamp/cc.asn1

    - name: Create cc.asn1 build directory
      run: cmake -E make_directory ${{runner.workspace}}/externals/cc.asn1/build

    - name: Configure cc.asn1
      shell: bash
      working-directory: ${{runner.workspace}}/externals/cc.asn1/build
      run: cmake ${{runner.workspace}}/externals/cc.asn1 -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_INSTALL_PREFIX=install
      env:
        CC: gcc-${{matrix.cc_ver}}
        CXX: g++-${{matrix.cc_ver}}

    - name: Build cc.asn1 library
      working-directory: ${{runner.workspace}}/externals/cc.asn1/build
      shell: bash
      run: cmake --build . --target install
      env:
        VERBOSE: 1

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_INSTALL_PREFIX=install -DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=gold -DCMAKE_PREFIX_PATH=${{runner.workspace}}/externals/comms/build/install\;${{runner.workspace}}/externals/commsdsl/build/install\;${{runner.workspace}}/externals/cc.asn1/build/install -DCC_X509_BUILD_APPS=ON -DCMAKE_CXX_STANDARD=${{matrix.cpp}}
      env:
        CC: gcc-${{matrix.cc_ver}}
        CXX: g++-${{matrix.cc_ver}}

    - name: Build 
      working-directory: ${{runner.workspace}}/build/
      shell: bash
      run: cmake --build . 
      env:
        VERBOSE: 1 

  build_gcc_ubuntu_20_04:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        type: [Debug, Release, MinSizeRel]
        cc_ver: [8, 9, 10, 11]
        cpp: [11, 14, 17, 20]
        exclude:
          - cc_ver: 8
            cpp: 20

    steps:
    - uses: actions/checkout@v2

    - name: Prepare Install
      run: sudo apt-get update --fix-missing    
      
    - name: Install Packages
      run: sudo apt install libxml2-dev gcc-${{matrix.cc_ver}} g++-${{matrix.cc_ver}} gcc-8 g++-8

    - name: Create Externals directory
      run: cmake -E make_directory ${{runner.workspace}}/externals        

    - name: Clone COMMS library
      working-directory: ${{runner.workspace}}/externals 
      run: git clone -b $COMMS_BRANCH https://github.com/commschamp/comms

    - name: Create COMMS build directory
      run: cmake -E make_directory ${{runner.workspace}}/externals/comms/build  

    - name: Configure COMMS library
      shell: bash
      working-directory: ${{runner.workspace}}/externals/comms/build 
      run: cmake ${{runner.workspace}}/externals/comms -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_INSTALL_PREFIX=install
      env:
        CC: gcc-${{matrix.cc_ver}}
        CXX: g++-${{matrix.cc_ver}}

    - name: Build COMMS library
      working-directory: ${{runner.workspace}}/externals/comms/build
      shell: bash
      run: cmake --build . --target install
      env:
        VERBOSE: 1     

    - name: Clone commsdsl
      working-directory: ${{runner.workspace}}/externals 
      run: git clone -b $COMMSDSL_BRANCH https://github.com/commschamp/commsdsl

    - name: Create commsdsl build directory
      run: cmake -E make_directory ${{runner.workspace}}/externals/commsdsl/build  

    - name: Configure commsdsl
      shell: bash
      working-directory: ${{runner.workspace}}/externals/commsdsl/build 
      run: cmake ${{runner.workspace}}/externals/commsdsl -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_INSTALL_PREFIX=install -DCOMMSDSL_INSTALL_LIBRARY=OFF -DCMAKE_PREFIX_PATH="${{runner.workspace}}/externals/comms/build/install"
      env:
        CC: gcc-${{matrix.cc_ver}}
        CXX: g++-${{matrix.cc_ver}}

    - name: Build commsdsl
      working-directory: ${{runner.workspace}}/externals/commsdsl/build
      shell: bash
      run: cmake --build . --target install
      env:
        VERBOSE: 1

    - name: Clone cc.asn1
      working-directory: ${{runner.workspace}}/externals
      run: git clone -b $CC_ASN1_BRANCH https://github.com/commschamp/cc.asn1

    - name: Create cc.asn1 build directory
      run: cmake -E make_directory ${{runner.workspace}}/externals/cc.asn1/build

    - name: Configure cc.asn1
      shell: bash
      working-directory: ${{runner.workspace}}/externals/cc.asn1/build
      run: cmake ${{runner.workspace}}/externals/cc.asn1 -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_INSTALL_PREFIX=install
      env:
        CC: gcc-${{matrix.cc_ver}}
        CXX: g++-${{matrix.cc_ver}}

    - name: Build cc.asn1 library
      working-directory: ${{runner.workspace}}/externals/cc.asn1/build
      shell: bash
      run: cmake --build . --target install
      env:
        VERBOSE: 1

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_INSTALL_PREFIX=install -DCMAKE_PREFIX_PATH=${{runner.workspace}}/externals/comms/build/install\;${{runner.workspace}}/externals/commsdsl/build/install;\${{runner.workspace}}/externals/cc.asn1/build/install -DCC_X509_BUILD_APPS=ON -DCMAKE_CXX_STANDARD=${{matrix.cpp}}
      env:
        CC: gcc-${{matrix.cc_ver}}
        CXX: g++-${{matrix.cc_ver}}

    - name: Build 
      working-directory: ${{runner.workspace}}/build/
      shell: bash
      run: cmake --build . 
      env:
        VERBOSE: 1 

  build_clang_ubuntu_18_04:
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        type: [Debug, Release, MinSizeRel]
        cc_ver: ["4.0", "5.0", "6.0"]
        cpp: [11, 14, 17]
        exclude:
          - cc_ver: "4.0"
            cpp: 17


    steps:
    - uses: actions/checkout@v2

    - name: Prepare Install
      run: sudo apt-get update --fix-missing    
      
    - name: Install Packages
      run: sudo apt install libxml2-dev clang-${{matrix.cc_ver}} clang-6.0

    - name: Create Externals directory
      run: cmake -E make_directory ${{runner.workspace}}/externals        

    - name: Clone COMMS library
      working-directory: ${{runner.workspace}}/externals 
      run: git clone -b $COMMS_BRANCH https://github.com/commschamp/comms

    - name: Create COMMS build directory
      run: cmake -E make_directory ${{runner.workspace}}/externals/comms/build  

    - name: Configure COMMS library
      shell: bash
      working-directory: ${{runner.workspace}}/externals/comms/build 
      run: cmake ${{runner.workspace}}/externals/comms -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_INSTALL_PREFIX=install
      env:
        CC: clang-${{matrix.cc_ver}}
        CXX: clang++-${{matrix.cc_ver}}

    - name: Build COMMS library
      working-directory: ${{runner.workspace}}/externals/comms/build
      shell: bash
      run: cmake --build . --target install
      env:
        VERBOSE: 1     

    - name: Clone commsdsl
      working-directory: ${{runner.workspace}}/externals 
      run: git clone -b $COMMSDSL_BRANCH https://github.com/commschamp/commsdsl

    - name: Create commsdsl build directory
      run: cmake -E make_directory ${{runner.workspace}}/externals/commsdsl/build  

    - name: Configure commsdsl
      shell: bash
      working-directory: ${{runner.workspace}}/externals/commsdsl/build 
      run: cmake ${{runner.workspace}}/externals/commsdsl -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_INSTALL_PREFIX=install -DCOMMSDSL_INSTALL_LIBRARY=OFF -DCMAKE_PREFIX_PATH="${{runner.workspace}}/externals/comms/build/install"
      env:
        CC: clang-6.0
        CXX: clang++-6.0

    - name: Build commsdsl
      working-directory: ${{runner.workspace}}/externals/commsdsl/build
      shell: bash
      run: cmake --build . --target install
      env:
        VERBOSE: 1

    - name: Clone cc.asn1
      working-directory: ${{runner.workspace}}/externals
      run: git clone -b $CC_ASN1_BRANCH https://github.com/commschamp/cc.asn1

    - name: Create cc.asn1 build directory
      run: cmake -E make_directory ${{runner.workspace}}/externals/cc.asn1/build

    - name: Configure cc.asn1
      shell: bash
      working-directory: ${{runner.workspace}}/externals/cc.asn1/build
      run: cmake ${{runner.workspace}}/externals/cc.asn1 -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_INSTALL_PREFIX=install
      env:
        CC: clang-${{matrix.cc_ver}}
        CXX: clang++-${{matrix.cc_ver}}

    - name: Build cc.asn1 library
      working-directory: ${{runner.workspace}}/externals/cc.asn1/build
      shell: bash
      run: cmake --build . --target install
      env:
        VERBOSE: 1

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_INSTALL_PREFIX=install -DCMAKE_PREFIX_PATH=${{runner.workspace}}/externals/comms/build/install\;${{runner.workspace}}/externals/commsdsl/build/install\;${{runner.workspace}}/externals/cc.asn1/build/install -DCC_X509_BUILD_APPS=ON -DCMAKE_CXX_STANDARD=${{matrix.cpp}}
      env:
        CC: clang-${{matrix.cc_ver}}
        CXX: clang++-${{matrix.cc_ver}}

    - name: Build 
      working-directory: ${{runner.workspace}}/build/
      shell: bash
      run: cmake --build . 
      env:
        VERBOSE: 1 

  build_clang_ubuntu_20_04:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        type: [Debug, Release, MinSizeRel]
        cc_ver: [7, 8, 9, 10, 11, 12]
        cpp: [11, 14, 17, 20]
        exclude:
          - cc_ver: 7
            cpp: 20
          - cc_ver: 8
            cpp: 20

    steps:
    - uses: actions/checkout@v2

    - name: Prepare Install
      run: sudo apt-get update --fix-missing    
      
    - name: Install Packages
      run: sudo apt install libxml2-dev clang-${{matrix.cc_ver}}
    - name: Create Externals directory
      run: cmake -E make_directory ${{runner.workspace}}/externals        

    - name: Clone COMMS library
      working-directory: ${{runner.workspace}}/externals 
      run: git clone -b $COMMS_BRANCH https://github.com/commschamp/comms

    - name: Create COMMS build directory
      run: cmake -E make_directory ${{runner.workspace}}/externals/comms/build  

    - name: Configure COMMS library
      shell: bash
      working-directory: ${{runner.workspace}}/externals/comms/build 
      run: cmake ${{runner.workspace}}/externals/comms -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_INSTALL_PREFIX=install
      env:
        CC: clang-${{matrix.cc_ver}}
        CXX: clang++-${{matrix.cc_ver}}

    - name: Build COMMS library
      working-directory: ${{runner.workspace}}/externals/comms/build
      shell: bash
      run: cmake --build . --target install
      env:
        VERBOSE: 1     

    - name: Clone commsdsl
      working-directory: ${{runner.workspace}}/externals 
      run: git clone -b $COMMSDSL_BRANCH https://github.com/commschamp/commsdsl

    - name: Create commsdsl build directory
      run: cmake -E make_directory ${{runner.workspace}}/externals/commsdsl/build  

    - name: Configure commsdsl
      shell: bash
      working-directory: ${{runner.workspace}}/externals/commsdsl/build 
      run: cmake ${{runner.workspace}}/externals/commsdsl -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_INSTALL_PREFIX=install -DCOMMSDSL_INSTALL_LIBRARY=OFF -DCMAKE_PREFIX_PATH="${{runner.workspace}}/externals/comms/build/install"
      env:
        CC: clang-${{matrix.cc_ver}}
        CXX: clang++-${{matrix.cc_ver}}

    - name: Build commsdsl
      working-directory: ${{runner.workspace}}/externals/commsdsl/build
      shell: bash
      run: cmake --build . --target install
      env:
        VERBOSE: 1               

    - name: Clone cc.asn1
      working-directory: ${{runner.workspace}}/externals
      run: git clone -b $CC_ASN1_BRANCH https://github.com/commschamp/cc.asn1

    - name: Create cc.asn1 build directory
      run: cmake -E make_directory ${{runner.workspace}}/externals/cc.asn1/build

    - name: Configure cc.asn1
      shell: bash
      working-directory: ${{runner.workspace}}/externals/cc.asn1/build
      run: cmake ${{runner.workspace}}/externals/cc.asn1 -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_INSTALL_PREFIX=install
      env:
        CC: clang-${{matrix.cc_ver}}
        CXX: clang++-${{matrix.cc_ver}}

    - name: Build cc.asn1 library
      working-directory: ${{runner.workspace}}/externals/cc.asn1/build
      shell: bash
      run: cmake --build . --target install
      env:
        VERBOSE: 1

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_INSTALL_PREFIX=install -DCMAKE_PREFIX_PATH=${{runner.workspace}}/externals/comms/build/install\;${{runner.workspace}}/externals/commsdsl/build/install\;${{runner.workspace}}/externals/cc.asn1/build/install -DCC_X509_BUILD_APPS=ON -DCMAKE_CXX_STANDARD=${{matrix.cpp}}
      env:
        CC: clang-${{matrix.cc_ver}}
        CXX: clang++-${{matrix.cc_ver}}

    - name: Build
      working-directory: ${{runner.workspace}}/build/
      shell: bash
      run: cmake --build . 
      env:
        VERBOSE: 1 

                           
          
